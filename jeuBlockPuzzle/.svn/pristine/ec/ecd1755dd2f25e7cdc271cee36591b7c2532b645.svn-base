# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 13:14:17 2021

@author: lucgu
"""

import pygame
import sys
import random
from grid import *



class Jeu() : 
    
    def __init__(self,n):
        self.grilles = Grille(n) 
        self.Nbre_joueurs = 2
        self.surface_x= 750 *self.Nbre_joueurs
        self.surface_y = 700 
        self.screen = pygame.display.set_mode((self.surface_x ,self.surface_y),)#pygame.FULLSCREEN) #création d'une page 
        self.tot = None
        self.n = n
        self.t1 = None
        self.t2 = None
        self.t3 = None
        self.t1s= [[0]*3 for i in range(3)]
        self.t2s =[[0]*3 for i in range(3)]
        self.t3s = [[0]*3 for i in range(3)]
        self.grilles.blocs.blocs_disponibles = self.grilles.blocs.proposed_blocs()


        #self.grilles.bloc_du_joueur



#quand je clique, si clique sur la grille , print des indices de la grilles

     
    def convert(self):
        s1 = (pygame.mouse.get_pos()[0]-20) // 50 
        t1= (pygame.mouse.get_pos()[1]-20) // 50 
        v = (s1,t1)
        return v 
        
    def carre(self):
        x,y = pygame.mouse.get_pos()
        if x >= 540 and x <= 740:
            print(self.grilles.blocs.bloc_du_joueur)
            print(self.grilles.blocs.blocs_disponibles[0])
            print(self.grilles.blocs.blocs_disponibles[1])
            print(self.grilles.blocs.blocs_disponibles[2])
            if y >= 20 and y <= 220:
                self.grilles.blocs.bloc_du_joueur = self.grilles.blocs.blocs_disponibles[0]
                self.grilles.blocs.blocs_disponibles[0] = False
            elif y >= 220 and y <= 420:
                self.grilles.blocs.bloc_du_joueur = self.grilles.blocs.blocs_disponibles[1]
                self.grilles.blocs.blocs_disponibles[1] = False
            elif y >= 420 and y <= 620:
                self.grilles.blocs.bloc_du_joueur = self.grilles.blocs.blocs_disponibles[2]
                self.grilles.blocs.blocs_disponibles[2] = False
 
    
    
    def contrecarre(self):
        x,y = pygame.mouse.get_pos()
        if x >= 540 and x <= 740:
            if y >= 20 and y <= 220:
                return 0
            elif y >= 220 and y <= 420:
                return 1
            elif y >= 420 and y <= 620:
                return 2
            else:
                return -1

    

    def fonction_principale(self):
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT: #pour tout les événements dans pygame
                    sys.exit() 
                if event.type == pygame.MOUSEBUTTONDOWN:
                    self.carre()
                    print(self.grilles.blocs.blocs_disponibles)
                if event.type == pygame.MOUSEBUTTONDOWN:
                   m = self.contrecarre()
                if event.type == pygame.MOUSEBUTTONUP: 
                    a,b = self.convert()
                    print (a,b)
                    print(self.grilles.blocs.bloc_du_joueur) 
                    if a > len(self.grilles.matrix)-1  or  b > len(self.grilles.matrix)-1 or self.grilles.placer(a, b)== False :
                        self.grilles.blocs.blocs_disponibles[m] = self.grilles.blocs.bloc_du_joueur
                        self.grilles.blocs.bloc_du_joueur = False
                    else:
                        self.grilles.placer(a,b)
                if not (any(self.grilles.blocs.blocs_disponibles)):
                    self.grilles.blocs.blocs_disponibles = self.grilles.blocs.proposed_blocs()     
                    print(self.grilles.matrix)


                
#A faire : l'écran d'accueil + ajouter le score 
# Commencer les deuxjoueurs : dès qu'un joueur à un false, on passe à l'autre 
                    

            
                    



            self.grilles.effacer_lignes()

                    

            
            self.screen.fill((240,240,240)) #Afficher l'écran en blanc
            self.tot = pygame.Surface((self.n*50,self.n*50)) #création d'un rectangle pour la grille avec la matrix
            self.tot.fill((0,100,111))
            self.t1 =  pygame.Surface((200,200))
            self.t1.fill((250,0,0))
            self.t2 =  pygame.Surface((200,200))
            self.t2.fill((250,250,0))
            self.t3 =  pygame.Surface((200,200))
            self.t3.fill((0,250,0))            
            


                        
            for val in range (len(self.grilles.matrix)) :
                for i in range(len (self.grilles.matrix[val])):
                    if self.grilles.matrix[val][i] == 'X':
                        x = pygame.Surface((50,50))
                        self.tot.blit(x,(val*50,i*50))
                        
            if self.grilles.blocs.blocs_disponibles[0] != False :            
                for pos in self.grilles.blocs.blocs_disponibles[0]:  
                    x= 0;
                    self.t1s[x + pos[0]][x + pos[1]] = 'X'
                    if self.t1s[x + pos[0]][x + pos[1]] == 'X':
                        y = pygame.Surface((50,50))
                        self.t1.blit(y,( (pos[0])* 50, (pos[1])* 50 ))




                    
            if self.grilles.blocs.blocs_disponibles[1] != False :         
                for pos in self.grilles.blocs.blocs_disponibles[1] :
                    x= 0;
                    self.t2s[x + pos[0]][x + pos[1]] = 'X'
                    if self.t2s[x + pos[0]][x + pos[1]] == 'X':
                        y = pygame.Surface((50,50))
                        self.t2.blit(y,( (pos[0])* 50, (pos[1])* 50 )) 


                        
                    
                    
                    
            if self.grilles.blocs.blocs_disponibles[2] != False :         
                for pos in self.grilles.blocs.blocs_disponibles[2] :
                    x= 0;
                    self.t3s[x + pos[0]][x + pos[1]] = 'X'
                    if self.t3s[x + pos[0]][x + pos[1]] == 'X':
                        y = pygame.Surface((50,50))
                        self.t3.blit(y,( (pos[0])* 50, (pos[1])* 50 )) 

                
                



                    

            for x in range(0,self.n*50,50):#a partir du N sélectionner au départ, créer une grille 
                pygame.draw.line(self.tot,(255,255,255),[x,0],[x,self.n*50],1)
            for y in range(0,self.n*50,50):
                pygame.draw.line(self.tot,(255,255,255),[0,y],[self.n*50,y],1)
               
              
            for x in range(0,200,50):#a partir du N sélectionner au départ, créer une grille 
                pygame.draw.line(self.t1,(0,0,0),[x,0],[x,200],1)
            for y in range(0,200,50):
                pygame.draw.line(self.t1,(0,0,0),[0,y],[200,y],1) 

            
            for x in range(0,200,50):#a partir du N sélectionner au départ, créer une grille 
                pygame.draw.line(self.t2,(0,0,0),[x,0],[x,200],1)
            for y in range(0,200,50):
                pygame.draw.line(self.t2,(0,0,0),[0,y],[200,y],1)
                
            for x in range(0,200,50):#a partir du N sélectionner au départ, créer une grille 
                pygame.draw.line(self.t3,(0,0,0),[x,0],[x,200],1)
            for y in range(0,200,50):
                pygame.draw.line(self.t3,(0,0,0),[0,y],[200,y],1)
                
            self.grilles.effacer_lignes()
                

            

            self.screen.blit(self.tot,(20,20))
            self.screen.blit(self.t1,(540,20))# pose la grille dans la fenetre générale
            self.screen.blit(self.t2,(540,220))# pose la grille dans la fenetre générale
            self.screen.blit(self.t3,(540,420))# pose la grille dans la fenetre générale
            
            arial_font =  pygame.font.SysFont("arial", 20,)
            Score = arial_font.render("Score : " + str(self.grilles.score), False , (0,0,0))
            self.screen.blit(Score,(50,600))
           


            pygame.display.flip() #mettre à jour la page
    
            


        
        
                  

if __name__== "__main__":
    pygame.init()
    #Jeu(10).choix_joueur() 
    Jeu(10).fonction_principale()
    pygame.quit()



#convertir le clique de souris en pixel 

              
 #montre si une des touche est cliqué
            #print(mouse)
                
#Chose à faire 
    #Placer les blocs dans la suface test
    #Pouvoir déplacer les blocs vers la grille 
    #pouvoir placer les blocs sur la grille
    #créer une surface pour le score
